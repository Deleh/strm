#!/usr/bin/env bash

# Text formatting variables
text_reset="\e[0m"
text_bold="\e[1m"

function print_usage {
    echo "Usage: strm [OPTIONS] QUERY ... [OPTIONS]"
    echo
    echo "Stream media files over SSH."
    echo
    echo "OPTIONS"
    echo "  -h, --help                                 Show this help message"
    echo "  -c, --config CONFIG_FILE                   Path to config file"
    echo "  -l, --list                                 List files instead of playing"
    echo "  -m, --media-directories MEDIA_DIRECTORIES  Use given media directories, config is ignored"
    echo "  -s, --shuffle                              Play files in random order"
    echo
    echo "EXAMPLES"
    echo "  strm -l .             # List all available files"
    echo "  strm Elephants Dream  # Play files whose path contain 'elephants' and 'dream' in order"
    echo "  strm e*phants         # Play files whose path matches the wildcard 'e*phants'"
    exit
}

function print_controls {
    echo -ne "\n[${text_bold}p${text_reset}] Play/Pause, [${text_bold}<${text_reset}/${text_bold}>${text_reset}] Previous/Next, [${text_bold}q${text_reset}] Quit\n" 
}

function error {
    echo -ne "${text_bold}ERROR${text_reset} $1\n" >&2
    exit 1
}

# Check if mpv is installed
if ! command -v mpv &>/dev/null
then
    error "mpv was not found, please install it"
fi

# Set default values
config="$HOME/.config/strm/strm.config"
list=false
shuffle=false
query=()
media_directories=""

# Parse arguments
while (( "$#" )); do
    case "$1" in
        -c|--config)
	    if [ -n "$2" ] && [ "${2:0:1}" != "-" ]; then
		config="$2"
		shift 2
	    else
		error "Argument for $1 is missing"
	    fi
            ;;
        -h|--help)
            print_usage
            ;;
        -l|--list)
            list=true
            shift
            ;;
	-m|--media-directories)
	    if [ -n "$2" ] && [ "${2:0:1}" != "-" ]; then
		media_directories="$2"
		shift 2
	    else
		error "Argument for $1 is missing"
	    fi
            ;;
        -s|--shuffle)
            shuffle=true
            shift
            ;;
        *)
            query+=("$1")
            shift
            ;;
    esac
done

# Print usage if no query was given
if [ "${#query[@]}" == 0 ]; then
    print_usage
fi

# If no media directory was set load config file
if [ "$media_directories" == "" ]; then

    # Read config file
    if test -f "$config"; then
	. "$config"
    else
	error "Config file not found ($config)"
    fi

    # Throws error if still no media directory set
    if [ "$media_directories" == "" ]; then
	error "No media directory specified"
    fi
fi

# Remove possible whitespace characters from media directories string
media_directories=${media_directories//[[:blank:]]/}

# Read media directories
IFS="," read -a media_directories <<< "$media_directories"

# Construct find argument array
find_arguments=()
for i in "${!query[@]}"; do

    # If more than one query is given add a logical AND
    if [ "$i" -ge 1 ]; then
        find_arguments+=("-a")
    fi

    # Use the ipath argument to search case insensitive
    find_arguments+=("-ipath")
    find_arguments+=("'*${query[$i]}*'")
done

# Initialize result arrays
sftp_results=()
print_results=()

# Get results from every media directory
for media_directory in "${media_directories[@]}"; do

    tmp_sftp_results=()
    tmp_print_results=()

    # Get connection string and remote directory
    IFS="/" read -r connection_string directory <<< "$media_directory"

    echo -ne "Fetching results from $text_bold$connection_string$text_reset\n"
    
    # Add leading and trailing slash to directory if missing
    [[ "$directory" != /*/ ]] && directory="/$directory/"


    # Get search results from remote
    # Look for paths matching given queries in visible directories, listing only filenames and links
    mapfile -t tmp_results < <(ssh -o ConnectTimeout=10 "$connection_string" find "$directory" -not -path \"*/\.*\" -type l,f "${find_arguments[@]}" | sort)

    # Build SFTP strings and printable strings
    for i in "${!tmp_results[@]}"; do
        tmp_sftp_results["$i"]="sftp://$connection_string${tmp_results[$i]}"
	tmp_print_result="$text_bold$connection_string$text_reset ${tmp_results[$i]}"
	tmp_print_results["$i"]="${tmp_print_result/$directory/}"
    done
    sftp_results=("${sftp_results[@]}" "${tmp_sftp_results[@]}")
    print_results=("${print_results[@]}" "${tmp_print_results[@]}")
done

echo

# Exit if no results found
if [ "${#sftp_results[@]}" == 0 ]; then
    echo "No files found"
    exit
fi

# Print result header
if [ "$list" == false ]; then
    if [ "$shuffle" == true ]; then
        echo "Playing the following files in random order:"
    else
        echo "Playing the following files:"
    fi
else
    echo "Found the following files:"
fi

echo

# Print results
for result in "${print_results[@]}"; do
    echo -ne "$result\n"
done

# Play results if --list flag not set
if [ "$list" == false ]; then

    print_controls

    # Play all remote files
    if [ "$shuffle" == true ]; then
        mpv --msg-level=all=error,statusline=status --term-status-msg='${playlist-pos-1}/${playlist-count} - ${time-pos}/${duration} - \e[1m${media-title}\e[0m' --shuffle "${sftp_results[@]}"
    else
        mpv --msg-level=all=error,statusline=status --term-status-msg='${playlist-pos-1}/${playlist-count} - ${time-pos}/${duration} - \e[1m${media-title}\e[0m' "${sftp_results[@]}"
    fi
fi
